#include "fileio.h"

#include <string.h>

File* file_open(const char* filename, const char* mode) {
    File* file = (File*)malloc(sizeof(File));
    if (!file) {
        perror("Error creating file");
        return NULL;
    }

    file->fp = fopen(filename, mode);
    if (file->fp == NULL) {
        perror("Error opening file");
        return NULL;
    }

    file->name = (char*)filename;
    file->fd = fileno(file->fp);

    if (fstat(file->fd, &file->stats) == -1) {
        perror("Error getting file stats");
        fclose(file->fp);
        return NULL;
    }
    return file;
}

int file_copy(File* src, File* dst) {
    char buffer[BUFSIZ];
    size_t n;
    while ((n = read(src->fd, buffer, sizeof(char) * BUFSIZ)) != 0) {
        write(dst->fd, buffer, sizeof(char) * n);
    }
    return 0;
}

int file_move(File* file, const char* newdir) {
    // create intermediate directories if they don't exist
    int status = mkdir(newdir, S_IRWXU | S_IRWXG | S_IRWXO);
    if (status != 0 && errno != EEXIST) {
        perror("Error creating directory");
        return 1;
    }

    // move file to the new destination
    char new_path[BUFSIZ] = {0};
    sprintf(new_path, "%s/%s", newdir, file->name);

    int dest_fd = open(new_path, O_CREAT | O_WRONLY | O_TRUNC, 0644);
    if (dest_fd < 0) {
        perror("error creating destination file");
        return 1;
    }

    char buf[4096];
    ssize_t nread;

    while ((nread = fread(buf, sizeof(buf), sizeof(char), file->fp)) > 0) {
        if (write(dest_fd, buf, nread) != nread) {
            perror("error writing to destination file");
            close(dest_fd);
            return 1;
        }
    }

    if (nread < 0) {
        perror("error reading from source file");
        return 1;
    }

    remove(file->name);
    return 0;
}

int file_truncate(File* file, off_t length) {
    int result = ftruncate(file->fd, length);
    if (result != 0) {
        perror("Error truncating file");
        return -1;
    }

    if (fstat(file->fd, &file->stats) == -1) {
        perror("Error getting file stats");
        return -1;
    }
    return 0;
}

int file_read_all(File* file, char* buffer, long bufsize) {
    char buf[BUFSIZ];
    ssize_t nread;
    while ((nread = fread(buf, sizeof(buf), sizeof(char), file->fp)) > 0)
        ;

    if (nread < 0) {
        perror("error reading from file");
        return 1;
    }

    // Buffer overun risk.
    memcpy(buffer, buf, bufsize);
    return 0;
}

// Returns the length of the file up to 2GB.
ssize_t file_length(File* file) {
    fseek(file->fp, 0L, SEEK_END);
    ssize_t size = ftell(file->fp);
    // seek back to the beginning
    fseek(file->fp, 0L, SEEK_SET);
    return size;
}

int file_get_stats(File* file, struct stat* stats) {
    *stats = file->stats;
    return 0;
}

int main(int argc, char** argv) {
    File* file = file_open(argv[1], "r");
    if (!file) {
        return 1;
    }

    long file_size = file_length(file);
    char buf[file_size];

    if (file_read_all(file, buf, file_size) == 0) {
        printf("%s\n", buf);
    }

    struct stat stats;
    if (file_get_stats(file, &stats) != 0) {
        return 1;
    }
    printf("File size: %lld bytes\n", (long long)stats.st_size);

    // Perform file operations
    File* copy = file_open("sample.txt", "w");
    if (!copy) {
        fclose(file->fp);
        return 1;
    }

    file_copy(file, copy);

    if (file_move(copy, "/home/nabiizy/clanguage") != 0) {
        return 1;
    }

    if (file_truncate(copy, 0) != 0) {
        return 1;
    }

    close(copy->fd);
    close(file->fd);
    return 0;
}
